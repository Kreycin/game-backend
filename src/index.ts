// src/index.ts
'use strict';

import path from 'path';

// [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏™‡∏£‡πâ‡∏≤‡∏á Set ‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏à‡∏≥" ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å x·ª≠ l√Ω ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
const processedEntryIds = new Set();

export default {
  bootstrap({ strapi }) {
    // --- Firebase ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
    try {
      const firebaseAdminPath = path.resolve(__dirname, 'config', 'firebase-admin.js');
      const firebaseApp = require(firebaseAdminPath);
      strapi.firebase = firebaseApp;
      console.log('‚úÖ Firebase Admin has been initialized and is ready.');
    } catch (error)
    {
      console.error('‚ùå Failed to initialize Firebase Admin in bootstrap:', error);
    }

    // --- ‡∏£‡∏∞‡∏ö‡∏ö "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡∏ô‡∏ó‡∏µ" ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥ ---
    console.log('üöÄ Setting up Instant Announcement listener with duplicate protection...');
    strapi.eventHub.on('entry.publish', async ({ model, entry }) => {
      try {
        // [‡πÄ‡∏û‡∏¥‡πà‡∏°] Logic ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
        if (processedEntryIds.has(entry.id)) {
          console.log(`[EventHub] üü° Ignoring duplicate event for ID: ${entry.id}`);
          return; // ‡∏ñ‡πâ‡∏≤ ID ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å x·ª≠ l√Ω ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        }
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ ‡πÉ‡∏´‡πâ "‡∏à‡∏î‡∏à‡∏≥" ID ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        processedEntryIds.add(entry.id);


        // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ model ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (model.singularName === 'announcement') {
          // --- ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
          console.log(`[EventHub] üì¢ Announcement published: "${entry.title}"`);

          const { title, message, server } = entry;
          const query = strapi.db.query('api::user-notification.user-notification');
          const whereClause = server === 'all' ? {} : { selectedServer: server };
          const userNotifications = await query.findMany({ where: whereClause, select: ['fcmToken'] });

          if (userNotifications.length === 0) {
            console.log(`[EventHub] üì™ No users found for server: '${server}'`);
            // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡πâ‡∏≠‡∏á return ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            // ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö ID ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Set ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
            processedEntryIds.delete(entry.id);
            return;
          }

          const tokens = userNotifications.map(sub => sub.fcmToken).filter(Boolean);

          if (tokens.length > 0) {
            const payload = { title, body: message };
            console.log(`[EventHub] üöÄ Sending announcement to ${tokens.length} device(s)...`);
            await strapi.service('api::notification-service.notification').send(tokens, payload);
          }
        }

        // [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ "‡∏•‡∏∑‡∏°" ID ‡∏ô‡∏µ‡πâ
        setTimeout(() => {
          processedEntryIds.delete(entry.id);
        }, 5000); // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

      } catch (error) {
        // [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î Error ‡πÉ‡∏´‡πâ "‡∏•‡∏∑‡∏°" ID ‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (entry && entry.id) {
          processedEntryIds.delete(entry.id);
        }
        console.error('[EventHub] Error during entry.publish event:', error);
      }
    });
  },
};