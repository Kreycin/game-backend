"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Task ‡∏Ç‡∏≠‡∏á Cron Job ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
exports.default = {
    eventNotifier: {
        task: async ({ strapi }) => {
            const now = new Date();
            console.log(`[CRON] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${now.toUTCString()}`);
            try {
                const currentDayUTC = now.getUTCDay();
                const currentHourUTC = now.getUTCHours();
                const currentMinuteUTC = now.getUTCMinutes();
                const potentialEvents = await strapi.db.query('api::game-event.game-event').findMany({
                    where: {
                        publishedAt: { $notNull: true },
                        $or: [
                            { eventType: 'Daily' },
                            { eventType: 'Weekly', dayOfWeekUTC: currentDayUTC },
                        ],
                    },
                });
                if (!potentialEvents || potentialEvents.length === 0) {
                    return;
                }
                const eventsToTrigger = potentialEvents.filter(event => {
                    if (!event.timeUTC)
                        return false;
                    const [eventHour, eventMinute] = event.timeUTC.split(':').map(Number);
                    return eventHour === currentHourUTC && eventMinute === currentMinuteUTC;
                });
                if (eventsToTrigger.length === 0) {
                    return;
                }
                console.log(`[CRON] üéØ ‡∏û‡∏ö ${eventsToTrigger.length} ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ!`);
                for (const event of eventsToTrigger) {
                    const userNotifications = await strapi.db.query('api::user-notification.user-notification').findMany({
                        where: { selectedServer: event.server },
                        select: ['fcmToken'],
                    });
                    if (userNotifications.length === 0) {
                        console.log(`[CRON] üì™ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô server '${event.server}' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå '${event.eventName}'`);
                        continue;
                    }
                    const tokens = userNotifications.map(sub => sub.fcmToken).filter(Boolean);
                    if (tokens.length === 0) {
                        console.log(`[CRON] üì™ ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server '${event.server}'`);
                        continue;
                    }
                    const payload = {
                        title: event.eventName,
                        body: event.eventMessage,
                    };
                    console.log(`[CRON] üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô '${event.eventName}' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${tokens.length} ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...`);
                    await strapi.service('api::notification-service.notification').send(tokens, payload);
                }
            }
            catch (error) {
                console.error('[CRON] ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        },
        options: {
            rule: "*/1 * * * *", // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        },
    },
};
